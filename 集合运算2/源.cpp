#include<iostream>#include<cstring>using namespace std;class Set {private:	int k;	int data[100];public:	Set() {		k = 0;	}	void Display();	void Add(int e);//put an integer e to data;	void Delete(int i);	int Refer(int i);	void Sort();	int Find(int i) const;	Set Intersect(const Set &s1, const Set &s2);	Set Union(const Set & s1, const Set & s2);	Set Difference(const Set &s1, const Set &s2);};void Set::Add(int e) {	for (int i = 0; i < k; i++) {		if (e == data[i]) return;	}	data[k] = e;	k++;}void Set::Display() {	this->Sort();	cout << "{";	for (int i = 0; i < k; i++) {		if (i != 0)cout << ",";		cout << data[i];	}	cout << "}";	cout << endl;}void Set::Delete(int i) {	for (int j = i - 1; j < k; j++) {		data[j] = data[j + 1];		j++;	}	k--;}void Set::Sort() {	for (int i = 0; i < this->k - 1; i++) {		for (int j = 0; j < this->k - i - 1; j++) {			if (this->data[j] > this->data[j + 1]) {				int t = this->data[j];				this->data[j] = this->data[j + 1];				this->data[j + 1] = t;			}		}	}}int Set::Find(int i)const {	for (int j = 0; j < this->k; j++) {		if (i == this->data[j]) return 1;	}	return 0;}int Set::Refer(int i) {	cout << data[i - 1] << " " << endl;	return data[i - 1];}Set Set::Intersect(const Set &s1, const Set &s2) {	Set s3;	for (int i = 0; i < s1.k; i++) {		for (int j = 0; j < s2.k; j++) {			if (s1.data[i] == s2.data[j])				s3.Add(s1.data[i]);		}	}	return s3;}Set Set::Union(const Set & s1, const Set & s2) {	Set s3;	for (int i = 0; i < s1.k; i++) {		s3.Add(s1.data[i]);	}	for (int i = 0; i < s2.k; i++) {		s3.Add(s2.data[i]);	}	s3.Sort();	return s3;}Set Set::Difference(const Set &s1, const Set &s2) {	Set s3;	for (int i = 0; i < s1.k; i++) {		if (s2.Find(s1.data[i]) == 0)			s3.Add(s1.data[i]);	}	return s3;}int main() {	Set s1, s2;	int m, n, e;	cin >> m >> n;	for (int i = 0; i < m; i++) {		cin >> e;		s1.Add(e);	}	for (int i = 0; i < n; i++) {		cin >> e;		s2.Add(e);	}	s1.Display();	s2.Display();	Set s3 = s3.Union(s1, s2);	s3.Display();	s3 = s3.Intersect(s1, s2);	s3.Display();	s3 = s3.Difference(s1, s2);	s3.Display();	return 0;}